#include <sys/socket.h>#include <netinet/in.h>#include <arpa/inet.h>#include <stdio.h>#include <stdlib.h>#include <unistd.h>#include <errno.h>#include <string.h>#include <sys/types.h>#include <time.h>#define IP_PROTOCOL_VAL 0//Structure of the data which should be sent! :)struct attr {	char attr_id[32];	u_int16_t dis;};void error(char *msg){    perror(msg);    exit(1);}int void new_way(){	//definitions of structures and variables to use.	struct addrinfo address_info, *res;;	memset(&address_info, 0, sizeof hints);	address_info.family = AF_INET; 		// Or AF_UNSPEC if unknown 	address_info.socktype = SOCK_STREAM;	address_info.ai_flags = AI_PASSIVE;	getaddrinfo(NULL, "3490", &address_info, &res);	int sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);	bind(sockfd, res->ai_addr, res->ai_addrlen);}int main(){	//definitions of structures and variables to use.	struct addrinfo address_info;	struct sockaddr_in ip4addr;	char server_buffer[512];	ip4addr.sin_family = AF_INET;	ip4addr.sin_port = htons(3490); //port	memset(ip4addr.sin_zero, '\0', sizeof(ip4addr.sin_zero));	//my_addr.sin_addr.s_addr = inet_addr("10.12.110.57");	inet_pton(AF_INET, INADDR_ANY, &(ip4addr.sin_addr)); // IPv4, check for 0 < x to see if valid. inet_ntop(AF_INET, &(sa.sin_addr), ip4, INET_ADDRSTRLEN); is the opposite way;//	inet_pton(AF_INET, "192.168.1.1", &(ip4addr.sin_addr)); // IPv4, check for 0 < x to see if valid. inet_ntop(AF_INET, &(sa.sin_addr), ip4, INET_ADDRSTRLEN); is the opposite way;	//4-byte IP address in network byte order! // 192.168.1.1     ->    11000000.10101000.00000001.00000001. let inet_pton() convert to 4 byte. 	int sockfd = socket(AF_INET, SOCK_STREAM, IP_PROTOCOL_VAL); //PF_INET, third argument: getprotobyname() -1 on error.  	bind(sockfd, (struct sockaddr*)&ip4addr, sizeof(ip4addr));	listen(sockfd, 20);//#define EXIT_FAILURE	//int setsockopt(int sockfd, int level, int optname,const void *optval, socklen_t optlen);	return EXIT_SUCCESS;}(man send, man recv) socket calls.